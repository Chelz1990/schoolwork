#include <iostream>
#include <vector>
#include <thread>

// Function to get partial sum of each range
void partialSum (int begin, int fin, double& partial, int thread_num) {
    std::cout << "Thread " << thread_num << " range (" << begin << ", " << fin << ")" << std::endl;
    partial = 0;

    for (int i = begin; i <= fin; ++i) {
        partial += i;
    }

    std::cout << "Thread " << thread_num << " sum: " << partial << std::endl;
}

// Function to create threads
void createThreads (int N, int T, int begin, std::vector<std::thread>& threads, std::vector<double> results) {
    // Calculate range
    int getRange = N / T;
    int remainingRange = N % T;

    //add threads to vector and make them sleep for 1 second
    for (int i = 0; i < T; ++i) {
        int end = begin + getRange - 1 + (i < remainingRange ? 1 : 0);
        threads.emplace_back(partialSum, begin, end, std::ref(results[i]), i + 1); //emplace_back suggested by c-lion.
        begin = end + 1;
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }

    // Let end user know the program is running
    std::cout << "Creating threads..." << std::endl;
    std::cout << "Calculating ranges and totals..." << std::endl;
}

int main() {
    int N, T;
    long total = 0;

    // User input
    std::cout << "Enter the top number of the range: ";
    std::cin >> N;
    std::cout << "Enter the number of threads: ";
    std::cin >> T;

    // Vectors for threads and thread results
    std::vector<std::thread> threads;
    std::vector<double> totals(T, 0);

    // Call function
    createThreads(N, T, 0, threads, totals);


    // Join and wait for threads to finish
    for (auto& t : threads) {
        t.join();
    }

    // Get total sum
    for (const auto& partialSum : totals) {
        total += partialSum;
    }

    // Final output and let end user know the program finished successfully!
    std::cout << "Total sum of all threads: " << total << std::endl;
    std::cout << "Threads finished." << std::endl;

    return 0;
}
